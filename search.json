[{"path":"https://sarahsamorodnitsky.github.io/TopKAT/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2024 TopKAT authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://sarahsamorodnitsky.github.io/TopKAT/articles/TopKAT.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"TopKAT","text":"vignette, illustrate apply TopKAT method analyze cell-level imaging data. motivation behind TopKAT analysis multiplexed spatial proteomics imaging phenotype locations cells derived based spatial proteome. goal examine association geometry cells images patient-level outcomes. vignette rely simulated point pattern data includes contrived shapes, namely squares circles.","code":""},{"path":"https://sarahsamorodnitsky.github.io/TopKAT/articles/TopKAT.html","id":"loading-in-the-data-and-plotting","dir":"Articles","previous_headings":"","what":"Loading in the Data and Plotting","title":"TopKAT","text":"start loading packages need vignette simulated data. data organized row corresponds cell within image. PID column refers sample patient ID , case, enumerates 1 100. id column enumerates image number within sample since many applications multiple images per patient. case, PID id columns simulated single image sample. x y columns denote 2D coordinates cell locations. type column contains simulated type cell, ranging cell type 1 cell type 4. simulate data, split 100 samples two groups 50. first 50 samples, generated random numbers squares. latter 50, generated random numbers unit circles. two groups, also simulated different survival outcomes. outcomes simulated exponential distribution rates equal log(2)\\log(2) log(2)/2\\log(2)/2, respectively. randomly censored 10% samples. plot handful images get sense various shapes cells. apparent images exhibit contrived shapes generated cells: top row images, cells organized squares whereas second row cells organized loops. intentional order illustrate process detecting large connected components among cells (squares, first image) large loops.","code":"# Packages library(TopKAT) #> Registered S3 method overwritten by 'httr': #>   method         from   #>   print.response rmutil library(patchwork) library(survival) library(survminer) #> Loading required package: ggplot2 #> Loading required package: ggpubr #>  #> Attaching package: 'survminer' #> The following object is masked from 'package:survival': #>  #>     myeloma  # Load data data(data1.df)  # View the first few lines head(data1.df) #>   PID id        x       y        type #> 1   1  1 41.48928 16.3068 cell type 3 #> 2   1  1 42.48928 16.3068 cell type 2 #> 3   1  1 43.48928 16.3068 cell type 2 #> 4   1  1 44.48928 16.3068 cell type 4 #> 5   1  1 45.48928 16.3068 cell type 3 #> 6   1  1 46.48928 16.3068 cell type 3 # Plotting some images from the first 50 p1 <- data1.df %>% dplyr::filter(PID == 1) %>%    ggplot(aes(x = x, y = y, colour = type)) + geom_point() +   theme_bw() + ggtitle(\"Sample 1\") +   theme(legend.position = )  p2 <- data1.df %>% dplyr::filter(PID == 2) %>%    ggplot(aes(x = x, y = y, colour = type)) + geom_point() +   theme_bw() + ggtitle(\"Sample 2\")  p3 <- data1.df %>% dplyr::filter(PID == 51) %>%    ggplot(aes(x = x, y = y, colour = type)) + geom_point() +   theme_bw() + ggtitle(\"Sample 51\")  p4 <- data1.df %>% dplyr::filter(PID == 52) %>%    ggplot(aes(x = x, y = y, colour = type)) + geom_point() +   theme_bw() + ggtitle(\"Sample 52\")  # Arrange the plots (p1 + p2 + p3 + p4 & theme(legend.position = \"bottom\")) + plot_layout(guides = \"collect\")"},{"path":"https://sarahsamorodnitsky.github.io/TopKAT/articles/TopKAT.html","id":"applying-topkat","dir":"Articles","previous_headings":"","what":"Applying TopKAT","title":"TopKAT","text":"goal TopKAT test whether images similar geometric structures created cells correspond patients similar outcomes (case, survival). null hypothesis wish test : H0H_0: association survival time topological structure cells H1H_1: association survival time topological structure cells TopKAT p-value small, evidence H0H_0. apply TopKAT, first need (1) quantify geometric arrangement cells image using persistent homology (2) calculate similarity geometric arrangements across images. geometric structures quantify connected components (degree-0 homologies) loops (degree-1 homologies). TopKAT compares images based similarities quantity size (.e., lifespan) homologies. words, two images similar number connected components loops shapes also similar sizes, similar two images differences attributes. detect quantify size homologies, use summary statistic known . persistence diagram summarizes number size connected components loops. illustrate examples persistence diagrams . first step using TopKAT package calculate kernel matrices quantify similarity images. use function rips_similarity_matrix compute kernel matrices. Note compute separate kernel matrix connected components loops, meaning first compare images basis connected components basis loops, yielding two matrices quantifying pairwise similarities among images. Later, kernel association test, aggregate across matrices yield omnibus test association. , show calculate kernel matrices using rips_similarity_matrix using maximum radius 100100. chose maximum radius since images dimension 100×100100 \\times 100. penalty selecting radius exceeds boundaries image. quantification persistent homology stops cells connected. Note may take several minutes run, depending number cells image. rips_similarity_matrix returns two lists: (1) K.list contains two kernel matrices connected components loops (2) rips.list contains persistence diagram image. illustrate two visualizations. First, visualize corresponding persistence diagrams four samples shown .  also show visualization kernel matrices describe similarities among images. Note similarity values kernel matrices interpretable can used compare similarities two pairs images.  Finally, can test association survival given kernel matrices computed . Since two kernel matrices, may want aggregate association results across homologies. construct linear combination kernel matrices aggregate results across different mixtures. straightforward choice weights ω=(0,0.5,1)\\omega = (0, 0.5, 1) following linear combination: Kagg=(1−ω)K0+ωK1K^{agg} = (1-\\omega) K_0 + \\omega K_1 now apply TopKAT. shown , TopKAT p-value significant, 3×10−53\\times 10^{-5}. can also examine significant results linear combination kernel matrices:","code":"# Compute the similarity matrix simmat <- rips_similarity_matrix(data1.df, max.threshold = 100, print.progress = FALSE) # Plotting the persistence diagrams pd1 <- plot_persistence(simmat$rips.list[[1]], title = \"Patient 1\")  pd2 <- plot_persistence(simmat$rips.list[[2]], title = \"Patient 2\")  pd3 <- plot_persistence(simmat$rips.list[[51]], title = \"Patient 51\")  pd4 <- plot_persistence(simmat$rips.list[[52]], title = \"Patient 52\")  # Arrange the plots (pd1 + pd2 + pd3 + pd4 & theme(legend.position = \"bottom\")) + plot_layout(guides = \"collect\") # Visualize the kernel matrices for the connected components K.cc <- simmat$K.list[[1]] %>%   reshape2::melt() %>%   ggplot(aes(x = Var1, y = Var2, fill = value)) +   geom_tile(color = \"white\") +   theme_bw() +   xlab(\"Image 1\") + ylab(\"Image 2\") +   ggtitle(\"Kernel Matrix for Connected Components\") +   theme(legend.text = element_text(angle = 45, hjust = 1))     # Visualize the kernel matrices for the loops K.loop <- simmat$K.list[[2]] %>%   reshape2::melt() %>%   ggplot(aes(x = Var1, y = Var2, fill = value)) +   geom_tile(color = \"white\") +   theme_bw() +   xlab(\"Image 1\") + ylab(\"Image 2\") +   ggtitle(\"Kernel Matrix for Loops\") +   theme(legend.text = element_text(angle = 45, hjust = 1))  # Arrange the plots K.cc + K.loop & theme(legend.position = \"bottom\") # Applying TopKAT to the simulated data res <- TopKAT(y = y, X = NULL, cens = cens,               K.list = simmat$K.list, omega.list = c(0, 0.5, 1),               outcome.type = \"survival\")  # Output the p-value res$overall.pval #> [1] 3.443675e-05 res$p.vals #>      omega.0    omega.0.5      omega.1  #> 1.107707e-04 3.650099e-05 1.972696e-05"},{"path":"https://sarahsamorodnitsky.github.io/TopKAT/articles/TopKAT.html","id":"descriptive-post-hoc-analyses","dir":"Articles","previous_headings":"","what":"Descriptive Post-Hoc Analyses","title":"TopKAT","text":"far, shown significant association geometric arrangements cells images survival. can now explore distances ``important” (.e., significantly associated outcome) assess cell types connected distance. , use scale_importance function. Given sequence radii, function iteratively runs TopKAT, thresholding persistence diagrams radius. thresholded persistence diagram, function runs process: calculating similarity persistence diagrams testing association outcome. resulting p-value radius stored examine connections among cells radius yields minimum p-value. set maximum radius (threshold) function select sequence radii 00 threshold run TopKAT . first examine sequence p-values radius. radius minimum TopKAT p-value arose r=28.57143r=28.57143.  can also examine simplicial complex radius looks like example images: Finally, can examine connectivity cell types radius using connectivity matrices. matrices enumerate many connections cells r=28.5r=28.5. visualize matrices four samples given .  can also illustrative compute average connectivity matrix across whole cohort within known patient samples, shown .","code":"res_scale_import <- scale_importance(pd.list = simmat$rips.list,                                      y = y, cens = cens,                                       omega.list = c(0, 0.5, 1),                                      threshold = 100,                                       PIDs = 1:100,                                      outcome.type = \"survival\") # Create a data.frame res_scale_import.df <- data.frame(   thresh = res_scale_import$threshold.seq,   pval = res_scale_import$pvals )  # Plot res_scale_import.df %>%    ggplot(aes(x = thresh, y = pval)) +   geom_point() +   theme_bw() +   xlab(\"Radius\") + ylab(\"P-Value\") +   ggtitle(\"TopKAT Significance at each Radius\") +   geom_vline(xintercept = res_scale_import$min.thresh, linetype = \"dashed\") # Plot the simplicial complex at r=res_scale_import$min.thresh sc1 <- plot_cells_with_scale(   image = data1.df %>% dplyr::filter(PID == 1),   threshold = res_scale_import$min.thresh,   title = \"Simplicial Complex for Sample 1\" )  sc2 <- plot_cells_with_scale(   image = data1.df %>% dplyr::filter(PID == 2),   threshold = res_scale_import$min.thresh,   title = \"Simplicial Complex for Sample 2\" )  sc3 <- plot_cells_with_scale(   image = data1.df %>% dplyr::filter(PID == 51),   threshold = res_scale_import$min.thresh,   title = \"Simplicial Complex for Sample 51\" )  sc4 <- plot_cells_with_scale(   image = data1.df %>% dplyr::filter(PID == 52),   threshold = res_scale_import$min.thresh,   title = \"Simplicial Complex for Sample 52\" )  # Arrange the plots sc1 + sc2 + sc3 + sc4 # Connectivity matrices c1 <- plot_cell_connections(   image = data1.df %>% dplyr::filter(PID == 1),   threshold = res_scale_import$min.thresh,   title = \"Cell Connectivity for Patient 1\",   type.column = \"type\",   unique.types = unique(data1.df$type) )  c2 <- plot_cell_connections(   image = data1.df %>% dplyr::filter(PID == 2),   threshold = res_scale_import$min.thresh,   title = \"Cell Connectivity for Patient 2\",   type.column = \"type\",   unique.types = unique(data1.df$type) )  c3 <- plot_cell_connections(   image = data1.df %>% dplyr::filter(PID == 51),   threshold = res_scale_import$min.thresh,   title = \"Cell Connectivity for Patient 51\",   type.column = \"type\",   unique.types = unique(data1.df$type) )  c4 <- plot_cell_connections(   image = data1.df %>% dplyr::filter(PID == 52),   threshold = res_scale_import$min.thresh,   title = \"Cell Connectivity for Patient 52\",   type.column = \"type\",   unique.types = unique(data1.df$type) )  # Arrange the plots c1 + c2 + c3 + c4 # Save the cell types cell.types <- as.character(unique(data1.df$type))  # Connectivity matrix for mixed and segregated connect <- matrix(0, nrow = length(cell.types), ncol = length(cell.types),                      dimnames = list(cell.types, cell.types))  # Iterate through the samples for (i in 1:100) {    # Save the data   patient <- data1.df %>% dplyr::filter(PID == i)     # Plot the scale importance   connect.i <- generate_connectivity(images.df = patient,                                       threshold = res_scale_import$min.thresh,                                       type.column = \"type\",                                       unique.types = cell.types)    # Match the rows and columns in case an image was missing a cell type   match.rows <- match(rownames(connect.i), cell.types)   match.cols <- match(colnames(connect.i), cell.types)    # Add to the matrix   connect[match.rows, match.cols] <- connect[match.rows, match.cols] + connect.i  }  # Take the average connect <- connect/100  # Visualize ggplot(reshape2::melt(connect), aes(Var1, Var2, fill = value)) +     ggplot2::geom_tile(colour = \"white\") +     viridis::scale_fill_viridis(option = \"turbo\") +     ggplot2::labs(x = \"Cell Type 1\", y = \"Cell Type 2\", fill = \"Number of Connections\") +     ggplot2::theme_minimal() +     ggplot2::theme(axis.text.x = element_text(size = 12, angle = 45, hjust = 1),           axis.text.y = element_text(size = 12),           axis.title = element_text(size = 13),           panel.grid.major = element_blank(),           panel.grid.minor = element_blank(),           legend.position = \"bottom\",           legend.title = element_text(size = 12),           legend.text = element_text(size = 11, angle = 45, hjust = 0.75),           plot.title = element_text(size = 14)) +     ggplot2::ggtitle(\"Average Connectivity Matrix Across Samples\")"},{"path":"https://sarahsamorodnitsky.github.io/TopKAT/articles/example_sim_tissue.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Applying TopKAT to Simulated Tissue Data","text":"vignette, illustrate apply TopKAT method analyze cell-level imaging data. simulated data using scSpatialSIM package (Soupir et al. 2024) provide realistic example applying TopKAT imaging data cell-level resolution.","code":""},{"path":"https://sarahsamorodnitsky.github.io/TopKAT/articles/example_sim_tissue.html","id":"loading-in-the-data-and-plotting","dir":"Articles","previous_headings":"","what":"Loading in the Data and Plotting","title":"Applying TopKAT to Simulated Tissue Data","text":"start loading packages need vignette simulated data. data organized similar manner simulated dataset used Getting Started vignette. PID column refers sample patient ID , case, enumerates 1 100. id column enumerates image number within sample since many applications multiple images per patient. case, PID id columns simulated single image sample. x y columns denote 2D coordinates cell locations. type column contains simulated type cell, ranging cell type 1 cell type 4. simulate data, split 100 samples two groups 50. simulated 50 datasets scSpatialSIM package using set parameters. simulated two tissue types. split two tissue types two groups. outcomes simulated described Getting Started vignette – simulated exponential distribution rates equal log(2)\\log(2) log(2)/2\\log(2)/2, respectively. randomly censored 10% samples. plot handful images illustrate spatial patterns among cells. ## Applying TopKAT goal TopKAT test whether images similar geometric structures created cells correspond patients similar outcomes (case, survival). null hypothesis wish test : H0H_0: association survival time topological structure cells H1H_1: association survival time topological structure cells TopKAT p-value small, evidence H0H_0. first calculate kernel matrices quantify similarity images using function rips_similarity_matrix. Note compute separate kernel matrix connected components loops. words, first compare images basis connected components basis loops, yielding two matrices quantifying pairwise similarities among images. Later, kernel association test, aggregate across matrices yield omnibus test association. , show calculate kernel matrices using rips_similarity_matrix using maximum radius 100100. chose maximum radius since images dimension 100×100100 \\times 100. penalty selecting radius exceeds boundaries image. illustrate two visualizations. First, visualize corresponding persistence diagrams four samples shown .  also show visualization kernel matrices describe similarities among images. Note similarity values kernel matrices interpretable can used compare similarities two pairs images.  Finally, can test association survival given kernel matrices computed . Since two kernel matrices, may want aggregate association results across homologies. construct linear combination kernel matrices aggregate results across different mixtures. straightforward choice weights ω=(0,0.5,1)\\omega = (0, 0.5, 1) following linear combination: Kagg=(1−ω)K0+ωK1K^{agg} = (1-\\omega) K_0 + \\omega K_1 now apply TopKAT. shown , TopKAT p-value significant, 2×10−52\\times 10^{-5}. can also examine significant results linear combination kernel matrices:","code":"library(TopKAT) #> Registered S3 method overwritten by 'httr': #>   method         from   #>   print.response rmutil library(patchwork) library(survival) library(survminer) #> Loading required package: ggplot2 #> Loading required package: ggpubr #>  #> Attaching package: 'survminer' #> The following object is masked from 'package:survival': #>  #>     myeloma  # Load data data(data2.df)  # View the first few lines head(data2.df) #>   PID id        x         y        type #> 1   1  1 54.39235 99.700192 cell type 2 #> 2   1  1 16.21411 56.966352 cell type 3 #> 3   1  1 70.50213  2.342483 cell type 4 #> 4   1  1 93.95205 19.413240 cell type 4 #> 5   1  1 70.82572  7.031758 cell type 1 #> 6   1  1 88.23047 37.269243 cell type 3 # Plotting some images from the first 50 p1 <- data2.df %>% dplyr::filter(PID == 1) %>%    ggplot(aes(x = x, y = y, colour = type)) + geom_point() +   theme_bw() + ggtitle(\"Sample 1\") +   theme(legend.position = )  p2 <- data2.df %>% dplyr::filter(PID == 2) %>%    ggplot(aes(x = x, y = y, colour = type)) + geom_point() +   theme_bw() + ggtitle(\"Sample 2\")  p3 <- data2.df %>% dplyr::filter(PID == 51) %>%    ggplot(aes(x = x, y = y, colour = type)) + geom_point() +   theme_bw() + ggtitle(\"Sample 51\")  p4 <- data2.df %>% dplyr::filter(PID == 52) %>%    ggplot(aes(x = x, y = y, colour = type)) + geom_point() +   theme_bw() + ggtitle(\"Sample 52\")  # Arrange the plots (p1 + p2 + p3 + p4 & theme(legend.position = \"bottom\")) + plot_layout(guides = \"collect\") # Compute the similarity matrix simmat <- rips_similarity_matrix(data2.df, max.threshold = 100, print.progress = FALSE) # Plotting the persistence diagrams pd1 <- plot_persistence(simmat$rips.list[[1]], title = \"Patient 1\")  pd2 <- plot_persistence(simmat$rips.list[[2]], title = \"Patient 2\")  pd3 <- plot_persistence(simmat$rips.list[[51]], title = \"Patient 51\")  pd4 <- plot_persistence(simmat$rips.list[[52]], title = \"Patient 52\")  # Arrange the plots (pd1 + pd2 + pd3 + pd4 & theme(legend.position = \"bottom\")) + plot_layout(guides = \"collect\") # Visualize the kernel matrices for the connected components K.cc <- simmat$K.list[[1]] %>%   reshape2::melt() %>%   ggplot(aes(x = Var1, y = Var2, fill = value)) +   geom_tile(color = \"white\") +   theme_bw() +   xlab(\"Image 1\") + ylab(\"Image 2\") +   ggtitle(\"Kernel Matrix for Connected Components\") +   theme(legend.text = element_text(angle = 45, hjust = 1))     # Visualize the kernel matrices for the loops K.loop <- simmat$K.list[[2]] %>%   reshape2::melt() %>%   ggplot(aes(x = Var1, y = Var2, fill = value)) +   geom_tile(color = \"white\") +   theme_bw() +   xlab(\"Image 1\") + ylab(\"Image 2\") +   ggtitle(\"Kernel Matrix for Loops\") +   theme(legend.text = element_text(angle = 45, hjust = 1))  # Arrange the plots K.cc + K.loop & theme(legend.position = \"bottom\") # Applying TopKAT to the simulated data res <- TopKAT(y = y, X = NULL, cens = cens,               K.list = simmat$K.list, omega.list = c(0, 0.5, 1),               outcome.type = \"survival\")  # Output the p-value res$overall.pval #> [1] 2.431229e-05 res$p.vals #>      omega.0    omega.0.5      omega.1  #> 2.575420e-05 2.422430e-05 2.310274e-05"},{"path":"https://sarahsamorodnitsky.github.io/TopKAT/articles/example_sim_tissue.html","id":"descriptive-post-hoc-analyses","dir":"Articles","previous_headings":"","what":"Descriptive Post-Hoc Analyses","title":"Applying TopKAT to Simulated Tissue Data","text":"can now explore distances “important” (.e., significant) assess cell types connected distance using scale_importance function. first examine sequence p-values radius. radius minimum TopKAT p-value arose r=8.163265r=8.163265.  can also examine simplicial complex radius looks like example images:  Finally, can examine connectivity cell types radius using connectivity matrices. matrices enumerate many connections cells r=8.2r= 8.2. visualize matrices four samples given .  can also illustrative compute average connectivity matrix across whole cohort within known patient samples, shown .","code":"res_scale_import <- scale_importance(pd.list = simmat$rips.list,                                      y = y, cens = cens,                                       omega.list = c(0, 0.5, 1),                                      threshold = 100,                                       PIDs = 1:100,                                      outcome.type = \"survival\") # Create a data.frame res_scale_import.df <- data.frame(   thresh = res_scale_import$threshold.seq,   pval = res_scale_import$pvals )  # Plot res_scale_import.df %>%    ggplot(aes(x = thresh, y = pval)) +   geom_point() +   theme_bw() +   xlab(\"Radius\") + ylab(\"P-Value\") +   ggtitle(\"TopKAT Significance at each Radius\") +   geom_vline(xintercept = res_scale_import$min.thresh, linetype = \"dashed\") # Plot the simplicial complex at r=res_scale_import$min.thresh sc1 <- plot_cells_with_scale(   image = data2.df %>% dplyr::filter(PID == 1),   threshold = res_scale_import$min.thresh,   title = \"Simplicial Complex for \\n Sample 1\" )  sc2 <- plot_cells_with_scale(   image = data2.df %>% dplyr::filter(PID == 2),   threshold = res_scale_import$min.thresh,   title = \"Simplicial Complex for \\n Sample 2\" )  sc3 <- plot_cells_with_scale(   image = data2.df %>% dplyr::filter(PID == 51),   threshold = res_scale_import$min.thresh,   title = \"Simplicial Complex for \\n Sample 51\" )  sc4 <- plot_cells_with_scale(   image = data2.df %>% dplyr::filter(PID == 52),   threshold = res_scale_import$min.thresh,   title = \"Simplicial Complex for \\n Sample 52\" )  # Arrange the plots sc1 + sc2 + sc3 + sc4 # Connectivity matrices c1 <- plot_cell_connections(   image = data2.df %>% dplyr::filter(PID == 1),   threshold = res_scale_import$min.thresh,   title = \"Cell Connectivity for Patient 1\",   type.column = \"type\",   unique.types = unique(data2.df$type) ) + labs(fill = \"# of Connections\")   c2 <- plot_cell_connections(   image = data2.df %>% dplyr::filter(PID == 2),   threshold = res_scale_import$min.thresh,   title = \"Cell Connectivity for Patient 2\",   type.column = \"type\",   unique.types = unique(data2.df$type) ) + labs(fill = \"# of Connections\")  c3 <- plot_cell_connections(   image = data2.df %>% dplyr::filter(PID == 51),   threshold = res_scale_import$min.thresh,   title = \"Cell Connectivity for Patient 51\",   type.column = \"type\",   unique.types = unique(data2.df$type) ) + labs(fill = \"# of Connections\")  c4 <- plot_cell_connections(   image = data2.df %>% dplyr::filter(PID == 52),   threshold = res_scale_import$min.thresh,   title = \"Cell Connectivity for Patient 52\",   type.column = \"type\",   unique.types = unique(data2.df$type) ) + labs(fill = \"# of Connections\")  # Arrange the plots c1 + c2 + c3 + c4 # Save the cell types cell.types <- as.character(unique(data2.df$type))  # Connectivity matrix for mixed and segregated connect <- matrix(0, nrow = length(cell.types), ncol = length(cell.types),                      dimnames = list(cell.types, cell.types))  # Iterate through the samples for (i in 1:100) {    # Save the data   patient <- data2.df %>% dplyr::filter(PID == i)     # Plot the scale importance   connect.i <- generate_connectivity(images.df = patient,                                       threshold = res_scale_import$min.thresh,                                       type.column = \"type\",                                       unique.types = cell.types)    # Match the rows and columns in case an image was missing a cell type   match.rows <- match(rownames(connect.i), cell.types)   match.cols <- match(colnames(connect.i), cell.types)    # Add to the matrix   connect[match.rows, match.cols] <- connect[match.rows, match.cols] + connect.i  }  # Take the average connect <- connect/100  # Visualize ggplot(reshape2::melt(connect), aes(Var1, Var2, fill = value)) +     ggplot2::geom_tile(colour = \"white\") +     viridis::scale_fill_viridis(option = \"turbo\") +     ggplot2::labs(x = \"Cell Type 1\", y = \"Cell Type 2\", fill = \"Number of Connections\") +     ggplot2::theme_minimal() +     ggplot2::theme(axis.text.x = element_text(size = 12, angle = 45, hjust = 1),           axis.text.y = element_text(size = 12),           axis.title = element_text(size = 13),           panel.grid.major = element_blank(),           panel.grid.minor = element_blank(),           legend.position = \"bottom\",           legend.title = element_text(size = 12),           legend.text = element_text(size = 11, angle = 45, hjust = 0.75),           plot.title = element_text(size = 14)) +     ggplot2::ggtitle(\"Average Connectivity Matrix Across Samples\")"},{"path":"https://sarahsamorodnitsky.github.io/TopKAT/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Sarah Samorodnitsky. Author, maintainer.","code":""},{"path":"https://sarahsamorodnitsky.github.io/TopKAT/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Samorodnitsky S (2024). TopKAT: Topological Kernel Association Test (TopKAT). R package version 0.0.0.9000, https://sarahsamorodnitsky.github.io/TopKAT/.","code":"@Manual{,   title = {TopKAT: Topological Kernel Association Test (TopKAT)},   author = {Sarah Samorodnitsky},   year = {2024},   note = {R package version 0.0.0.9000},   url = {https://sarahsamorodnitsky.github.io/TopKAT/}, }"},{"path":"https://sarahsamorodnitsky.github.io/TopKAT/index.html","id":"topkat-topological-kernel-association-test-","dir":"","previous_headings":"","what":"Topological Kernel Association Test (TopKAT)","title":"Topological Kernel Association Test (TopKAT)","text":"TopKAT global test association topological (geometric) structure cells cell-level imaging data patient-level outcomes. goal TopKAT package provide software run test post-hoc analyses results.","code":""},{"path":"https://sarahsamorodnitsky.github.io/TopKAT/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Topological Kernel Association Test (TopKAT)","text":"can install development version TopKAT Github via: TopKAT relies several dependencies: MiRKAT, RcppAlgos, TDAstats, dplyr, ggplot2, ggtda, reshape2, tidyr, viridis, igraph, magrittr. underlying engine running persistent homology TDAstats. ggtda, facilitates visualization filtration process persistence diagrams available Github.","code":"# First, install devtools if (!require(\"devtools\", quietly = TRUE)) {   install.packages(\"devtools\") }  # Install from Github devtools::install_github(\"sarahsamorodnitsky/TopKAT\")"},{"path":"https://sarahsamorodnitsky.github.io/TopKAT/index.html","id":"vignettes","dir":"","previous_headings":"","what":"Vignettes","title":"Topological Kernel Association Test (TopKAT)","text":"Example usage TopKAT analyze data provided two vignetes: Getting Started: illustrates application TopKAT simulated dataset containing contrived shapes. Simulated Tissue: illustrates application TopKAT dataset simulated using scSpatialSIM package. [1]","code":""},{"path":"https://sarahsamorodnitsky.github.io/TopKAT/index.html","id":"references","dir":"","previous_headings":"","what":"References","title":"Topological Kernel Association Test (TopKAT)","text":"[1] Soupir, . C., et al. (2024). scSpatialSIM: simulator spatial single-cell molecular data. bioRxiv, 2024-02.","code":""},{"path":"https://sarahsamorodnitsky.github.io/TopKAT/reference/TopKAT.html","id":null,"dir":"Reference","previous_headings":"","what":"Topological Kernel Association Test (TopKAT) — TopKAT","title":"Topological Kernel Association Test (TopKAT) — TopKAT","text":"Perform global test association geometric (topological) structures spatially-resolved images cells continuous, binary, survival outcomes.","code":""},{"path":"https://sarahsamorodnitsky.github.io/TopKAT/reference/TopKAT.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Topological Kernel Association Test (TopKAT) — TopKAT","text":"","code":"TopKAT(   y,   X = NULL,   cens = NULL,   K.list,   omega.list,   outcome.type = \"continuous\" )"},{"path":"https://sarahsamorodnitsky.github.io/TopKAT/reference/TopKAT.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Topological Kernel Association Test (TopKAT) — TopKAT","text":"y Vector outcomes. Must numeric. continuous survival data, numeric vector. binary outcome, must consist 0s 1s. X Matrix covariates adjust . May left NULL. cens Vector event indicators survival outcome. 1 indicates sample experienced event, 0 otherwise. using survival outcome, leave NULL. K.list List 2 kernel matrices corresponding similarities among connected components among loops. May provide 1 kernel matrix interested specific homology. omega.list Vector weights create different combinations kernel matrices. suggested options: c(0, 1) TopKAT combine p-values test associating connected components y loops y separately; c(0, 0.5, 1) combine p-values across just connected components, even split connected components loops, just loops. outcome.type kind outcome y? Options include \"continuous\", \"binary\", \"survival\"","code":""},{"path":"https://sarahsamorodnitsky.github.io/TopKAT/reference/TopKAT.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Topological Kernel Association Test (TopKAT) — TopKAT","text":"Returns list following objects: overall.pval: overall p-value describing association similarities topological structures clinical outcomes, p.vals: vector individual p-values weight omega.list, y: outcome provided, X: covariates provided, omega.list: vector weights provided, outcome.type: outcome type specified","code":""},{"path":"https://sarahsamorodnitsky.github.io/TopKAT/reference/TopKAT.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Topological Kernel Association Test (TopKAT) — TopKAT","text":"","code":"# First, construct the similarity matrix simmat <- rips_similarity_matrix(data1.df, max.threshold = 100, print.progress = TRUE) #> [1] \"Rips diagram: 1\" #> [1] \"Rips diagram: 2\" #> [1] \"Rips diagram: 3\" #> [1] \"Rips diagram: 4\" #> [1] \"Rips diagram: 5\" #> [1] \"Rips diagram: 6\" #> [1] \"Rips diagram: 7\" #> [1] \"Rips diagram: 8\" #> [1] \"Rips diagram: 9\" #> [1] \"Rips diagram: 10\" #> [1] \"Rips diagram: 11\" #> [1] \"Rips diagram: 12\" #> [1] \"Rips diagram: 13\" #> [1] \"Rips diagram: 14\" #> [1] \"Rips diagram: 15\" #> [1] \"Rips diagram: 16\" #> [1] \"Rips diagram: 17\" #> [1] \"Rips diagram: 18\" #> [1] \"Rips diagram: 19\" #> [1] \"Rips diagram: 20\" #> [1] \"Rips diagram: 21\" #> [1] \"Rips diagram: 22\" #> [1] \"Rips diagram: 23\" #> [1] \"Rips diagram: 24\" #> [1] \"Rips diagram: 25\" #> [1] \"Rips diagram: 26\" #> [1] \"Rips diagram: 27\" #> [1] \"Rips diagram: 28\" #> [1] \"Rips diagram: 29\" #> [1] \"Rips diagram: 30\" #> [1] \"Rips diagram: 31\" #> [1] \"Rips diagram: 32\" #> [1] \"Rips diagram: 33\" #> [1] \"Rips diagram: 34\" #> [1] \"Rips diagram: 35\" #> [1] \"Rips diagram: 36\" #> [1] \"Rips diagram: 37\" #> [1] \"Rips diagram: 38\" #> [1] \"Rips diagram: 39\" #> [1] \"Rips diagram: 40\" #> [1] \"Rips diagram: 41\" #> [1] \"Rips diagram: 42\" #> [1] \"Rips diagram: 43\" #> [1] \"Rips diagram: 44\" #> [1] \"Rips diagram: 45\" #> [1] \"Rips diagram: 46\" #> [1] \"Rips diagram: 47\" #> [1] \"Rips diagram: 48\" #> [1] \"Rips diagram: 49\" #> [1] \"Rips diagram: 50\" #> [1] \"Rips diagram: 51\" #> [1] \"Rips diagram: 52\" #> [1] \"Rips diagram: 53\" #> [1] \"Rips diagram: 54\" #> [1] \"Rips diagram: 55\" #> [1] \"Rips diagram: 56\" #> [1] \"Rips diagram: 57\" #> [1] \"Rips diagram: 58\" #> [1] \"Rips diagram: 59\" #> [1] \"Rips diagram: 60\" #> [1] \"Rips diagram: 61\" #> [1] \"Rips diagram: 62\" #> [1] \"Rips diagram: 63\" #> [1] \"Rips diagram: 64\" #> [1] \"Rips diagram: 65\" #> [1] \"Rips diagram: 66\" #> [1] \"Rips diagram: 67\" #> [1] \"Rips diagram: 68\" #> [1] \"Rips diagram: 69\" #> [1] \"Rips diagram: 70\" #> [1] \"Rips diagram: 71\" #> [1] \"Rips diagram: 72\" #> [1] \"Rips diagram: 73\" #> [1] \"Rips diagram: 74\" #> [1] \"Rips diagram: 75\" #> [1] \"Rips diagram: 76\" #> [1] \"Rips diagram: 77\" #> [1] \"Rips diagram: 78\" #> [1] \"Rips diagram: 79\" #> [1] \"Rips diagram: 80\" #> [1] \"Rips diagram: 81\" #> [1] \"Rips diagram: 82\" #> [1] \"Rips diagram: 83\" #> [1] \"Rips diagram: 84\" #> [1] \"Rips diagram: 85\" #> [1] \"Rips diagram: 86\" #> [1] \"Rips diagram: 87\" #> [1] \"Rips diagram: 88\" #> [1] \"Rips diagram: 89\" #> [1] \"Rips diagram: 90\" #> [1] \"Rips diagram: 91\" #> [1] \"Rips diagram: 92\" #> [1] \"Rips diagram: 93\" #> [1] \"Rips diagram: 94\" #> [1] \"Rips diagram: 95\" #> [1] \"Rips diagram: 96\" #> [1] \"Rips diagram: 97\" #> [1] \"Rips diagram: 98\" #> [1] \"Rips diagram: 99\" #> [1] \"Rips diagram: 100\"  # Then, run TopKAT res <- TopKAT(y = y,               cens = cens,               K.list = simmat$K.list,               omega.list = c(0, 0.5, 1),               outcome.type = \"survival\")  # Check result res$overall.pval #> [1] 3.443675e-05"},{"path":"https://sarahsamorodnitsky.github.io/TopKAT/reference/cens.html","id":null,"dir":"Reference","previous_headings":"","what":"Event indicator vector cens — cens","title":"Event indicator vector cens — cens","text":"vector contains binary indicators reflecting whether sample event. vector equals 1, indicates corresponding patient event 0 otherwise.","code":""},{"path":"https://sarahsamorodnitsky.github.io/TopKAT/reference/cens.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Event indicator vector cens — cens","text":"","code":"cens"},{"path":[]},{"path":"https://sarahsamorodnitsky.github.io/TopKAT/reference/cens.html","id":"cens","dir":"Reference","previous_headings":"","what":"cens","title":"Event indicator vector cens — cens","text":"vector length 100 event indicators.","code":""},{"path":"https://sarahsamorodnitsky.github.io/TopKAT/reference/data1.df.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulated data 1 — data1.df","title":"Simulated data 1 — data1.df","text":"dataset contains simulated data. images split two groups. first group simulated large squares. second group simulated loops. dataset contains 100 samples.","code":""},{"path":"https://sarahsamorodnitsky.github.io/TopKAT/reference/data1.df.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulated data 1 — data1.df","text":"","code":"data1.df"},{"path":[]},{"path":"https://sarahsamorodnitsky.github.io/TopKAT/reference/data1.df.html","id":"data-df","dir":"Reference","previous_headings":"","what":"data1.df","title":"Simulated data 1 — data1.df","text":"data frame 29951 rows 4 columns: PID Patient ID id Image ID (matches Patient ID) x x-coordinate cell y y-coordinate cell","code":""},{"path":"https://sarahsamorodnitsky.github.io/TopKAT/reference/data2.df.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulated data 2 — data2.df","title":"Simulated data 2 — data2.df","text":"dataset contains simulated data. images simulated using scSpatialSIM package represent different tissue structures. Specifically, used scSpatialSIM simulate two different tissues separated different images. dataset contains 100 samples.","code":""},{"path":"https://sarahsamorodnitsky.github.io/TopKAT/reference/data2.df.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulated data 2 — data2.df","text":"","code":"data2.df"},{"path":[]},{"path":"https://sarahsamorodnitsky.github.io/TopKAT/reference/data2.df.html","id":"data-df","dir":"Reference","previous_headings":"","what":"data2.df","title":"Simulated data 2 — data2.df","text":"data frame 100481 rows 4 columns: PID Patient ID id Image ID (matches Patient ID) x x-coordinate cell y y-coordinate cell","code":""},{"path":"https://sarahsamorodnitsky.github.io/TopKAT/reference/generate_connectivity.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate connectivity matrix — generate_connectivity","title":"Generate connectivity matrix — generate_connectivity","text":"Based radius lowest TopKAT p-value, compute connections matrix shows many edges cells type simplicial complex constructed based radius.","code":""},{"path":"https://sarahsamorodnitsky.github.io/TopKAT/reference/generate_connectivity.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate connectivity matrix — generate_connectivity","text":"","code":"generate_connectivity(images.df, threshold, type.column, unique.types)"},{"path":"https://sarahsamorodnitsky.github.io/TopKAT/reference/generate_connectivity.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate connectivity matrix — generate_connectivity","text":"images.df data.frame containing image information. See details. threshold Radius generate connectivity type.column name column images.df contains cell types unique.types Vector unique cell types type.column","code":""},{"path":"https://sarahsamorodnitsky.github.io/TopKAT/reference/generate_connectivity.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate connectivity matrix — generate_connectivity","text":"Returns connectivity matrix dimension \\(n\\times n\\) \\(n\\) number cell types, .e. length unique.types","code":""},{"path":"https://sarahsamorodnitsky.github.io/TopKAT/reference/generate_connectivity.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Generate connectivity matrix — generate_connectivity","text":"images.df contain PID column indicating sample image corresponds . also contain columns x y indicating location cell. row images.df corresponds cell within image. See package vignettes example structure. function may take several minutes run require substantial amount memory. memory limit reached, consider running mem.maxVSize(vsize = x) specify x large value.","code":""},{"path":"https://sarahsamorodnitsky.github.io/TopKAT/reference/generate_connectivity.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate connectivity matrix — generate_connectivity","text":"","code":"require(magrittr) #> Loading required package: magrittr conmat <- generate_connectivity(data1.df %>% dplyr::filter(PID == 1), threshold = 10,                                 type.column = \"type\", unique.types = unique(data1.df$type))"},{"path":"https://sarahsamorodnitsky.github.io/TopKAT/reference/generate_rips.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate a list of persistence diagrams — generate_rips","title":"Generate a list of persistence diagrams — generate_rips","text":"Construct Rips filtration image return list persistence diagrams. helper function scale_importance.","code":""},{"path":"https://sarahsamorodnitsky.github.io/TopKAT/reference/generate_rips.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate a list of persistence diagrams — generate_rips","text":"","code":"generate_rips(images.df, max.threshold, print.progress = TRUE)"},{"path":"https://sarahsamorodnitsky.github.io/TopKAT/reference/generate_rips.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate a list of persistence diagrams — generate_rips","text":"images.df data.frame containing image information. See details. max.threshold maximum radius circles Rips filtration print.progress Boolean indicating whether progress constructing Rips filtrations across images printed.","code":""},{"path":"https://sarahsamorodnitsky.github.io/TopKAT/reference/generate_rips.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate a list of persistence diagrams — generate_rips","text":"Returns list persistence diagrams image.","code":""},{"path":"https://sarahsamorodnitsky.github.io/TopKAT/reference/generate_rips.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate a list of persistence diagrams — generate_rips","text":"","code":"# Generate a persistence diagram based on a Rips filtration for each image pd.list <- generate_rips(data1.df, 100) #> [1] \"Rips diagram: 1\" #> [1] \"Rips diagram: 2\" #> [1] \"Rips diagram: 3\" #> [1] \"Rips diagram: 4\" #> [1] \"Rips diagram: 5\" #> [1] \"Rips diagram: 6\" #> [1] \"Rips diagram: 7\" #> [1] \"Rips diagram: 8\" #> [1] \"Rips diagram: 9\" #> [1] \"Rips diagram: 10\" #> [1] \"Rips diagram: 11\" #> [1] \"Rips diagram: 12\" #> [1] \"Rips diagram: 13\" #> [1] \"Rips diagram: 14\" #> [1] \"Rips diagram: 15\" #> [1] \"Rips diagram: 16\" #> [1] \"Rips diagram: 17\" #> [1] \"Rips diagram: 18\" #> [1] \"Rips diagram: 19\" #> [1] \"Rips diagram: 20\" #> [1] \"Rips diagram: 21\" #> [1] \"Rips diagram: 22\" #> [1] \"Rips diagram: 23\" #> [1] \"Rips diagram: 24\" #> [1] \"Rips diagram: 25\" #> [1] \"Rips diagram: 26\" #> [1] \"Rips diagram: 27\" #> [1] \"Rips diagram: 28\" #> [1] \"Rips diagram: 29\" #> [1] \"Rips diagram: 30\" #> [1] \"Rips diagram: 31\" #> [1] \"Rips diagram: 32\" #> [1] \"Rips diagram: 33\" #> [1] \"Rips diagram: 34\" #> [1] \"Rips diagram: 35\" #> [1] \"Rips diagram: 36\" #> [1] \"Rips diagram: 37\" #> [1] \"Rips diagram: 38\" #> [1] \"Rips diagram: 39\" #> [1] \"Rips diagram: 40\" #> [1] \"Rips diagram: 41\" #> [1] \"Rips diagram: 42\" #> [1] \"Rips diagram: 43\" #> [1] \"Rips diagram: 44\" #> [1] \"Rips diagram: 45\" #> [1] \"Rips diagram: 46\" #> [1] \"Rips diagram: 47\" #> [1] \"Rips diagram: 48\" #> [1] \"Rips diagram: 49\" #> [1] \"Rips diagram: 50\" #> [1] \"Rips diagram: 51\" #> [1] \"Rips diagram: 52\" #> [1] \"Rips diagram: 53\" #> [1] \"Rips diagram: 54\" #> [1] \"Rips diagram: 55\" #> [1] \"Rips diagram: 56\" #> [1] \"Rips diagram: 57\" #> [1] \"Rips diagram: 58\" #> [1] \"Rips diagram: 59\" #> [1] \"Rips diagram: 60\" #> [1] \"Rips diagram: 61\" #> [1] \"Rips diagram: 62\" #> [1] \"Rips diagram: 63\" #> [1] \"Rips diagram: 64\" #> [1] \"Rips diagram: 65\" #> [1] \"Rips diagram: 66\" #> [1] \"Rips diagram: 67\" #> [1] \"Rips diagram: 68\" #> [1] \"Rips diagram: 69\" #> [1] \"Rips diagram: 70\" #> [1] \"Rips diagram: 71\" #> [1] \"Rips diagram: 72\" #> [1] \"Rips diagram: 73\" #> [1] \"Rips diagram: 74\" #> [1] \"Rips diagram: 75\" #> [1] \"Rips diagram: 76\" #> [1] \"Rips diagram: 77\" #> [1] \"Rips diagram: 78\" #> [1] \"Rips diagram: 79\" #> [1] \"Rips diagram: 80\" #> [1] \"Rips diagram: 81\" #> [1] \"Rips diagram: 82\" #> [1] \"Rips diagram: 83\" #> [1] \"Rips diagram: 84\" #> [1] \"Rips diagram: 85\" #> [1] \"Rips diagram: 86\" #> [1] \"Rips diagram: 87\" #> [1] \"Rips diagram: 88\" #> [1] \"Rips diagram: 89\" #> [1] \"Rips diagram: 90\" #> [1] \"Rips diagram: 91\" #> [1] \"Rips diagram: 92\" #> [1] \"Rips diagram: 93\" #> [1] \"Rips diagram: 94\" #> [1] \"Rips diagram: 95\" #> [1] \"Rips diagram: 96\" #> [1] \"Rips diagram: 97\" #> [1] \"Rips diagram: 98\" #> [1] \"Rips diagram: 99\" #> [1] \"Rips diagram: 100\""},{"path":"https://sarahsamorodnitsky.github.io/TopKAT/reference/plot_cell_connections.html","id":null,"dir":"Reference","previous_headings":"","what":"Heatmap of cell-cell connections — plot_cell_connections","title":"Heatmap of cell-cell connections — plot_cell_connections","text":"Visualize connectivity matrix produced generate_connectivity","code":""},{"path":"https://sarahsamorodnitsky.github.io/TopKAT/reference/plot_cell_connections.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Heatmap of cell-cell connections — plot_cell_connections","text":"","code":"plot_cell_connections(image, threshold, title, type.column, unique.types)"},{"path":"https://sarahsamorodnitsky.github.io/TopKAT/reference/plot_cell_connections.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Heatmap of cell-cell connections — plot_cell_connections","text":"image data.frame containing image information. threshold Radius plot, usually threshold generated scale_importance title Plot title type.column name column images.df contains cell types unique.types Vector unique cell types type.column","code":""},{"path":"https://sarahsamorodnitsky.github.io/TopKAT/reference/plot_cell_connections.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Heatmap of cell-cell connections — plot_cell_connections","text":"Returns ggplot heatmap cell-cell connections.","code":""},{"path":"https://sarahsamorodnitsky.github.io/TopKAT/reference/plot_cell_connections.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Heatmap of cell-cell connections — plot_cell_connections","text":"","code":"require(magrittr) plot_cell_connections(    image = data1.df %>% dplyr::filter(PID == 1),    threshold = 10,    title = \"\",    type.column = \"type\",    unique.types = unique(data1.df$type) )"},{"path":"https://sarahsamorodnitsky.github.io/TopKAT/reference/plot_cells_with_scale.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot cells with radius value — plot_cells_with_scale","title":"Plot cells with radius value — plot_cells_with_scale","text":"function plots simplicial complex cells points given radius value connecting .","code":""},{"path":"https://sarahsamorodnitsky.github.io/TopKAT/reference/plot_cells_with_scale.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot cells with radius value — plot_cells_with_scale","text":"","code":"plot_cells_with_scale(image, threshold, title)"},{"path":"https://sarahsamorodnitsky.github.io/TopKAT/reference/plot_cells_with_scale.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot cells with radius value — plot_cells_with_scale","text":"image data.frame containing cell information single image. threshold Radius plot title Title plot","code":""},{"path":"https://sarahsamorodnitsky.github.io/TopKAT/reference/plot_cells_with_scale.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot cells with radius value — plot_cells_with_scale","text":"Returns ggplot scatterplot data edges length threshold connecting cells.","code":""},{"path":"https://sarahsamorodnitsky.github.io/TopKAT/reference/plot_cells_with_scale.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot cells with radius value — plot_cells_with_scale","text":"","code":"require(magrittr) plot_cells_with_scale(   image = data1.df %>% dplyr::filter(PID == 51),   threshold = 10,   title = \"Example Plot of Cells\" )"},{"path":"https://sarahsamorodnitsky.github.io/TopKAT/reference/plot_persistence.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot persistence diagrams — plot_persistence","title":"Plot persistence diagrams — plot_persistence","text":"Plot persistence diagrams","code":""},{"path":"https://sarahsamorodnitsky.github.io/TopKAT/reference/plot_persistence.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot persistence diagrams — plot_persistence","text":"","code":"plot_persistence(PD, title, dims = c(100, 100))"},{"path":"https://sarahsamorodnitsky.github.io/TopKAT/reference/plot_persistence.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot persistence diagrams — plot_persistence","text":"PD Persistence diagram given image title Title output figure dims Dimensions output figure","code":""},{"path":"https://sarahsamorodnitsky.github.io/TopKAT/reference/plot_persistence.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot persistence diagrams — plot_persistence","text":"Plot illustrating birth death scales homology","code":""},{"path":"https://sarahsamorodnitsky.github.io/TopKAT/reference/plot_persistence.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot persistence diagrams — plot_persistence","text":"","code":"require(magrittr) PD <- TDAstats::calculate_homology(        data2.df %>% dplyr::filter(PID == 1) %>% dplyr::select(x,y),        dim = 1,        threshold = 10) plot_persistence(PD = PD, title = \"Example Persistence Diagram\", dims = c(10, 10))"},{"path":"https://sarahsamorodnitsky.github.io/TopKAT/reference/rips_similarity_matrix.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate a similarity matrix based on the Rips filtration — rips_similarity_matrix","title":"Calculate a similarity matrix based on the Rips filtration — rips_similarity_matrix","text":"Given input data, computes Rips filtration persistence diagram image. constructs pairwise similarity matrix homology group (connected components loops) based resulting persistence diagrams.","code":""},{"path":"https://sarahsamorodnitsky.github.io/TopKAT/reference/rips_similarity_matrix.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate a similarity matrix based on the Rips filtration — rips_similarity_matrix","text":"","code":"rips_similarity_matrix(images.df, max.threshold, print.progress = TRUE)"},{"path":"https://sarahsamorodnitsky.github.io/TopKAT/reference/rips_similarity_matrix.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate a similarity matrix based on the Rips filtration — rips_similarity_matrix","text":"images.df data.frame containing image information. See details. max.threshold maximum radius circles Rips filtration print.progress Boolean indicating whether progress constructing Rips filtrations across images printed.","code":""},{"path":"https://sarahsamorodnitsky.github.io/TopKAT/reference/rips_similarity_matrix.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate a similarity matrix based on the Rips filtration — rips_similarity_matrix","text":"Returns list similarity (kernel) matrices list resulting persistence diagrams image.","code":""},{"path":"https://sarahsamorodnitsky.github.io/TopKAT/reference/rips_similarity_matrix.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculate a similarity matrix based on the Rips filtration — rips_similarity_matrix","text":"images.df contain PID column indicating sample image corresponds . also contain columns x y indicating location cell. row images.df corresponds cell within image. See package vignettes example structure. choose max.threshold, reasonable first choice select maximum possible radius cover cells image. maximum width largest image, example. function run first step TopKAT analysis. , resulting kernel matrices may fed TopKAT function.","code":""},{"path":"https://sarahsamorodnitsky.github.io/TopKAT/reference/rips_similarity_matrix.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate a similarity matrix based on the Rips filtration — rips_similarity_matrix","text":"","code":"# Construct a Rips filtration for each simulated image simmat <- rips_similarity_matrix(data1.df, max.threshold = 100, print.progress = TRUE) #> [1] \"Rips diagram: 1\" #> [1] \"Rips diagram: 2\" #> [1] \"Rips diagram: 3\" #> [1] \"Rips diagram: 4\" #> [1] \"Rips diagram: 5\" #> [1] \"Rips diagram: 6\" #> [1] \"Rips diagram: 7\" #> [1] \"Rips diagram: 8\" #> [1] \"Rips diagram: 9\" #> [1] \"Rips diagram: 10\" #> [1] \"Rips diagram: 11\" #> [1] \"Rips diagram: 12\" #> [1] \"Rips diagram: 13\" #> [1] \"Rips diagram: 14\" #> [1] \"Rips diagram: 15\" #> [1] \"Rips diagram: 16\" #> [1] \"Rips diagram: 17\" #> [1] \"Rips diagram: 18\" #> [1] \"Rips diagram: 19\" #> [1] \"Rips diagram: 20\" #> [1] \"Rips diagram: 21\" #> [1] \"Rips diagram: 22\" #> [1] \"Rips diagram: 23\" #> [1] \"Rips diagram: 24\" #> [1] \"Rips diagram: 25\" #> [1] \"Rips diagram: 26\" #> [1] \"Rips diagram: 27\" #> [1] \"Rips diagram: 28\" #> [1] \"Rips diagram: 29\" #> [1] \"Rips diagram: 30\" #> [1] \"Rips diagram: 31\" #> [1] \"Rips diagram: 32\" #> [1] \"Rips diagram: 33\" #> [1] \"Rips diagram: 34\" #> [1] \"Rips diagram: 35\" #> [1] \"Rips diagram: 36\" #> [1] \"Rips diagram: 37\" #> [1] \"Rips diagram: 38\" #> [1] \"Rips diagram: 39\" #> [1] \"Rips diagram: 40\" #> [1] \"Rips diagram: 41\" #> [1] \"Rips diagram: 42\" #> [1] \"Rips diagram: 43\" #> [1] \"Rips diagram: 44\" #> [1] \"Rips diagram: 45\" #> [1] \"Rips diagram: 46\" #> [1] \"Rips diagram: 47\" #> [1] \"Rips diagram: 48\" #> [1] \"Rips diagram: 49\" #> [1] \"Rips diagram: 50\" #> [1] \"Rips diagram: 51\" #> [1] \"Rips diagram: 52\" #> [1] \"Rips diagram: 53\" #> [1] \"Rips diagram: 54\" #> [1] \"Rips diagram: 55\" #> [1] \"Rips diagram: 56\" #> [1] \"Rips diagram: 57\" #> [1] \"Rips diagram: 58\" #> [1] \"Rips diagram: 59\" #> [1] \"Rips diagram: 60\" #> [1] \"Rips diagram: 61\" #> [1] \"Rips diagram: 62\" #> [1] \"Rips diagram: 63\" #> [1] \"Rips diagram: 64\" #> [1] \"Rips diagram: 65\" #> [1] \"Rips diagram: 66\" #> [1] \"Rips diagram: 67\" #> [1] \"Rips diagram: 68\" #> [1] \"Rips diagram: 69\" #> [1] \"Rips diagram: 70\" #> [1] \"Rips diagram: 71\" #> [1] \"Rips diagram: 72\" #> [1] \"Rips diagram: 73\" #> [1] \"Rips diagram: 74\" #> [1] \"Rips diagram: 75\" #> [1] \"Rips diagram: 76\" #> [1] \"Rips diagram: 77\" #> [1] \"Rips diagram: 78\" #> [1] \"Rips diagram: 79\" #> [1] \"Rips diagram: 80\" #> [1] \"Rips diagram: 81\" #> [1] \"Rips diagram: 82\" #> [1] \"Rips diagram: 83\" #> [1] \"Rips diagram: 84\" #> [1] \"Rips diagram: 85\" #> [1] \"Rips diagram: 86\" #> [1] \"Rips diagram: 87\" #> [1] \"Rips diagram: 88\" #> [1] \"Rips diagram: 89\" #> [1] \"Rips diagram: 90\" #> [1] \"Rips diagram: 91\" #> [1] \"Rips diagram: 92\" #> [1] \"Rips diagram: 93\" #> [1] \"Rips diagram: 94\" #> [1] \"Rips diagram: 95\" #> [1] \"Rips diagram: 96\" #> [1] \"Rips diagram: 97\" #> [1] \"Rips diagram: 98\" #> [1] \"Rips diagram: 99\" #> [1] \"Rips diagram: 100\""},{"path":"https://sarahsamorodnitsky.github.io/TopKAT/reference/scale_importance.html","id":null,"dir":"Reference","previous_headings":"","what":"Quantifying the importance of various scale parameters — scale_importance","title":"Quantifying the importance of various scale parameters — scale_importance","text":"Identify radii important characterizing association topological structure image outcomes.","code":""},{"path":"https://sarahsamorodnitsky.github.io/TopKAT/reference/scale_importance.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Quantifying the importance of various scale parameters — scale_importance","text":"","code":"scale_importance(   pd.list,   y,   X = NULL,   cens = NULL,   omega.list,   threshold,   PIDs,   outcome.type = \"continuous\",   n.thresh = 50,   print.progress = FALSE )"},{"path":"https://sarahsamorodnitsky.github.io/TopKAT/reference/scale_importance.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Quantifying the importance of various scale parameters — scale_importance","text":"pd.list List persistence diagrams y Outcome vector X Covariates adjust , desired. May left NULL. cens Censoring vector survival outcomes. May left NULL. omega.list Vector weights combine kernel matrices threshold Maximum radius Rips filtration PIDs Vector patient IDs outcome.type Outcome type, options include \"continuous\", \"binary\", \"survival\" print.progress Boolean, progress printed throughout analysis?","code":""},{"path":"https://sarahsamorodnitsky.github.io/TopKAT/reference/scale_importance.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Quantifying the importance of various scale parameters — scale_importance","text":"Returns list following elements: min.thresh radius value lowest TopKAT p-value obtained pvals vector TopKAT p-values radius value threshold.seq vector maximum radii considered","code":""},{"path":"https://sarahsamorodnitsky.github.io/TopKAT/reference/scale_importance.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Quantifying the importance of various scale parameters — scale_importance","text":"arguments method, omnibus, perm, nperm match used TopKAT analysis.","code":""},{"path":"https://sarahsamorodnitsky.github.io/TopKAT/reference/scale_importance.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Quantifying the importance of various scale parameters — scale_importance","text":"","code":"# Generate a persistence diagram based on a Rips filtration for each image pd.list <- generate_rips(data1.df, 100) #> [1] \"Rips diagram: 1\" #> [1] \"Rips diagram: 2\" #> [1] \"Rips diagram: 3\" #> [1] \"Rips diagram: 4\" #> [1] \"Rips diagram: 5\" #> [1] \"Rips diagram: 6\" #> [1] \"Rips diagram: 7\" #> [1] \"Rips diagram: 8\" #> [1] \"Rips diagram: 9\" #> [1] \"Rips diagram: 10\" #> [1] \"Rips diagram: 11\" #> [1] \"Rips diagram: 12\" #> [1] \"Rips diagram: 13\" #> [1] \"Rips diagram: 14\" #> [1] \"Rips diagram: 15\" #> [1] \"Rips diagram: 16\" #> [1] \"Rips diagram: 17\" #> [1] \"Rips diagram: 18\" #> [1] \"Rips diagram: 19\" #> [1] \"Rips diagram: 20\" #> [1] \"Rips diagram: 21\" #> [1] \"Rips diagram: 22\" #> [1] \"Rips diagram: 23\" #> [1] \"Rips diagram: 24\" #> [1] \"Rips diagram: 25\" #> [1] \"Rips diagram: 26\" #> [1] \"Rips diagram: 27\" #> [1] \"Rips diagram: 28\" #> [1] \"Rips diagram: 29\" #> [1] \"Rips diagram: 30\" #> [1] \"Rips diagram: 31\" #> [1] \"Rips diagram: 32\" #> [1] \"Rips diagram: 33\" #> [1] \"Rips diagram: 34\" #> [1] \"Rips diagram: 35\" #> [1] \"Rips diagram: 36\" #> [1] \"Rips diagram: 37\" #> [1] \"Rips diagram: 38\" #> [1] \"Rips diagram: 39\" #> [1] \"Rips diagram: 40\" #> [1] \"Rips diagram: 41\" #> [1] \"Rips diagram: 42\" #> [1] \"Rips diagram: 43\" #> [1] \"Rips diagram: 44\" #> [1] \"Rips diagram: 45\" #> [1] \"Rips diagram: 46\" #> [1] \"Rips diagram: 47\" #> [1] \"Rips diagram: 48\" #> [1] \"Rips diagram: 49\" #> [1] \"Rips diagram: 50\" #> [1] \"Rips diagram: 51\" #> [1] \"Rips diagram: 52\" #> [1] \"Rips diagram: 53\" #> [1] \"Rips diagram: 54\" #> [1] \"Rips diagram: 55\" #> [1] \"Rips diagram: 56\" #> [1] \"Rips diagram: 57\" #> [1] \"Rips diagram: 58\" #> [1] \"Rips diagram: 59\" #> [1] \"Rips diagram: 60\" #> [1] \"Rips diagram: 61\" #> [1] \"Rips diagram: 62\" #> [1] \"Rips diagram: 63\" #> [1] \"Rips diagram: 64\" #> [1] \"Rips diagram: 65\" #> [1] \"Rips diagram: 66\" #> [1] \"Rips diagram: 67\" #> [1] \"Rips diagram: 68\" #> [1] \"Rips diagram: 69\" #> [1] \"Rips diagram: 70\" #> [1] \"Rips diagram: 71\" #> [1] \"Rips diagram: 72\" #> [1] \"Rips diagram: 73\" #> [1] \"Rips diagram: 74\" #> [1] \"Rips diagram: 75\" #> [1] \"Rips diagram: 76\" #> [1] \"Rips diagram: 77\" #> [1] \"Rips diagram: 78\" #> [1] \"Rips diagram: 79\" #> [1] \"Rips diagram: 80\" #> [1] \"Rips diagram: 81\" #> [1] \"Rips diagram: 82\" #> [1] \"Rips diagram: 83\" #> [1] \"Rips diagram: 84\" #> [1] \"Rips diagram: 85\" #> [1] \"Rips diagram: 86\" #> [1] \"Rips diagram: 87\" #> [1] \"Rips diagram: 88\" #> [1] \"Rips diagram: 89\" #> [1] \"Rips diagram: 90\" #> [1] \"Rips diagram: 91\" #> [1] \"Rips diagram: 92\" #> [1] \"Rips diagram: 93\" #> [1] \"Rips diagram: 94\" #> [1] \"Rips diagram: 95\" #> [1] \"Rips diagram: 96\" #> [1] \"Rips diagram: 97\" #> [1] \"Rips diagram: 98\" #> [1] \"Rips diagram: 99\" #> [1] \"Rips diagram: 100\" # Run the scale importance analysis data1.scale <- scale_importance(pd.list = pd.list,   y = y,   cens = cens,   omega.list = c(0, 0.5, 1),   threshold = 100,   PIDs = 1:100,   outcome.type = \"survival\")  # Plot the results plot(data1.scale$threshold.seq, data1.scale$pvals); abline(v = data1.scale$min.thresh)"},{"path":"https://sarahsamorodnitsky.github.io/TopKAT/reference/similarity_matrix.html","id":null,"dir":"Reference","previous_headings":"","what":"Construct a pairwise similarity matrix — similarity_matrix","title":"Construct a pairwise similarity matrix — similarity_matrix","text":"similarity_matrix helper function used within rips_similarity_matrix construct pairwise similarity matrix comparing pairs persistence diagrams.","code":""},{"path":"https://sarahsamorodnitsky.github.io/TopKAT/reference/similarity_matrix.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Construct a pairwise similarity matrix — similarity_matrix","text":"","code":"similarity_matrix(rips.list, n.sample, PIDs, print.progress = FALSE)"},{"path":"https://sarahsamorodnitsky.github.io/TopKAT/reference/similarity_matrix.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Construct a pairwise similarity matrix — similarity_matrix","text":"rips.list list persistence diagrams sample n.sample number samples dataset (length rips.list) PIDs Unique identifiers sample. used name resulting similarity matrix. print.progress progress bar printed?","code":""},{"path":"https://sarahsamorodnitsky.github.io/TopKAT/reference/similarity_matrix.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Construct a pairwise similarity matrix — similarity_matrix","text":"Returns list kernel (similarity matrices) homology group.","code":""},{"path":"https://sarahsamorodnitsky.github.io/TopKAT/reference/similarity_matrix.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Construct a pairwise similarity matrix — similarity_matrix","text":"","code":"require(magrittr) require(TDAstats) #> Loading required package: TDAstats  # Save the PIDs PIDs <- unique(data1.df$PID)  # Save the number of samples n.sample <- length(PIDs)  # Initialize a list to store the Rips filtrations rips.list <- lapply(1:n.sample, function(i) list()); names(rips.list) <- PIDs  # Iterate through the samples to construct Rips filtration for (i in PIDs) {    # Subset the data to just this PID  data.i <- data1.df %>%    dplyr::filter(PID == i) %>%    dplyr::select(x,y)   # Construct a Rips filtration using TDAstats  rips.i <- TDAstats::calculate_homology(data.i, dim = 1, threshold = 10)   # Save  rips.list[[i]] <- rips.i }  K.list <- similarity_matrix(rips.list, n.sample, PIDs)"},{"path":"https://sarahsamorodnitsky.github.io/TopKAT/reference/y.html","id":null,"dir":"Reference","previous_headings":"","what":"Outcome vector y — y","title":"Outcome vector y — y","text":"vector contains outcomes simulated data. simulated survival outcomes exponential distribution. 100 samples, simulated event times two different exponential distributions.","code":""},{"path":"https://sarahsamorodnitsky.github.io/TopKAT/reference/y.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Outcome vector y — y","text":"","code":"y"},{"path":[]},{"path":"https://sarahsamorodnitsky.github.io/TopKAT/reference/y.html","id":"y","dir":"Reference","previous_headings":"","what":"y","title":"Outcome vector y — y","text":"vector length 100 event times.","code":""}]
